# coding: utf-8

"""
    Translator Knowledge Beacon API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API). 

    OpenAPI spec version: 1.0.12
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Annotation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, label=None, type=None, date=None, beacon=None):
        """
        Annotation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'label': 'str',
            'type': 'str',
            'date': 'str',
            'beacon': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'type': 'type',
            'date': 'date',
            'beacon': 'beacon'
        }

        self._id = id
        self._label = label
        self._type = type
        self._date = date
        self._beacon = beacon

    @property
    def id(self):
        """
        Gets the id of this Annotation.
        CURIE-encoded identifier to an associated external resources (e.g. PMID of a pubmed citation) 

        :return: The id of this Annotation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Annotation.
        CURIE-encoded identifier to an associated external resources (e.g. PMID of a pubmed citation) 

        :param id: The id of this Annotation.
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """
        Gets the label of this Annotation.
        canonical human readable and searchable label of the annotation (i.e. comment, matched sentence, etc.) 

        :return: The label of this Annotation.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Annotation.
        canonical human readable and searchable label of the annotation (i.e. comment, matched sentence, etc.) 

        :param label: The label of this Annotation.
        :type: str
        """

        self._label = label

    @property
    def type(self):
        """
        Gets the type of this Annotation.
        Gene Ontology Evidence Code (http://www.geneontology.org/page/guide-go-evidence-codes) 

        :return: The type of this Annotation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Annotation.
        Gene Ontology Evidence Code (http://www.geneontology.org/page/guide-go-evidence-codes) 

        :param type: The type of this Annotation.
        :type: str
        """

        self._type = type

    @property
    def date(self):
        """
        Gets the date of this Annotation.
        publication date of annotation (generally of format 'yyyy-mm-dd') 

        :return: The date of this Annotation.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this Annotation.
        publication date of annotation (generally of format 'yyyy-mm-dd') 

        :param date: The date of this Annotation.
        :type: str
        """

        self._date = date

    @property
    def beacon(self):
        """
        Gets the beacon of this Annotation.
        beacon ID 

        :return: The beacon of this Annotation.
        :rtype: str
        """
        return self._beacon

    @beacon.setter
    def beacon(self, beacon):
        """
        Sets the beacon of this Annotation.
        beacon ID 

        :param beacon: The beacon of this Annotation.
        :type: str
        """

        self._beacon = beacon

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Annotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
