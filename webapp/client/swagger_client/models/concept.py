# coding: utf-8

"""
    Translator Knowledge Beacon API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API). 

    OpenAPI spec version: 1.0.12
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Concept(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, semantic_group=None, synonyms=None, definition=None, beacon=None):
        """
        Concept - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'semantic_group': 'str',
            'synonyms': 'list[str]',
            'definition': 'str',
            'beacon': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'semantic_group': 'semanticGroup',
            'synonyms': 'synonyms',
            'definition': 'definition',
            'beacon': 'beacon'
        }

        self._id = id
        self._name = name
        self._semantic_group = semantic_group
        self._synonyms = synonyms
        self._definition = definition
        self._beacon = beacon

    @property
    def id(self):
        """
        Gets the id of this Concept.
        local object identifier for the concept in the specified knowledge source database 

        :return: The id of this Concept.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Concept.
        local object identifier for the concept in the specified knowledge source database 

        :param id: The id of this Concept.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Concept.
        canonical human readable name of the concept 

        :return: The name of this Concept.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Concept.
        canonical human readable name of the concept 

        :param name: The name of this Concept.
        :type: str
        """

        self._name = name

    @property
    def semantic_group(self):
        """
        Gets the semantic_group of this Concept.
        concept semantic type 

        :return: The semantic_group of this Concept.
        :rtype: str
        """
        return self._semantic_group

    @semantic_group.setter
    def semantic_group(self, semantic_group):
        """
        Sets the semantic_group of this Concept.
        concept semantic type 

        :param semantic_group: The semantic_group of this Concept.
        :type: str
        """

        self._semantic_group = semantic_group

    @property
    def synonyms(self):
        """
        Gets the synonyms of this Concept.
        list of synonyms for concept 

        :return: The synonyms of this Concept.
        :rtype: list[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """
        Sets the synonyms of this Concept.
        list of synonyms for concept 

        :param synonyms: The synonyms of this Concept.
        :type: list[str]
        """

        self._synonyms = synonyms

    @property
    def definition(self):
        """
        Gets the definition of this Concept.
        concept definition 

        :return: The definition of this Concept.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """
        Sets the definition of this Concept.
        concept definition 

        :param definition: The definition of this Concept.
        :type: str
        """

        self._definition = definition

    @property
    def beacon(self):
        """
        Gets the beacon of this Concept.
        beacon ID 

        :return: The beacon of this Concept.
        :rtype: str
        """
        return self._beacon

    @beacon.setter
    def beacon(self, beacon):
        """
        Sets the beacon of this Concept.
        beacon ID 

        :param beacon: The beacon of this Concept.
        :type: str
        """

        self._beacon = beacon

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Concept):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
