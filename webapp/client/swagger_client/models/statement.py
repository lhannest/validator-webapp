# coding: utf-8

"""
    Translator Knowledge Beacon API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API). 

    OpenAPI spec version: 1.0.12
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Statement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, subject=None, predicate=None, object=None, beacon=None):
        """
        Statement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'subject': 'StatementsSubject',
            'predicate': 'StatementsPredicate',
            'object': 'StatementsObject',
            'beacon': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'subject': 'subject',
            'predicate': 'predicate',
            'object': 'object',
            'beacon': 'beacon'
        }

        self._id = id
        self._subject = subject
        self._predicate = predicate
        self._object = object
        self._beacon = beacon

    @property
    def id(self):
        """
        Gets the id of this Statement.
        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)

        :return: The id of this Statement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Statement.
        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)

        :param id: The id of this Statement.
        :type: str
        """

        self._id = id

    @property
    def subject(self):
        """
        Gets the subject of this Statement.

        :return: The subject of this Statement.
        :rtype: StatementsSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this Statement.

        :param subject: The subject of this Statement.
        :type: StatementsSubject
        """

        self._subject = subject

    @property
    def predicate(self):
        """
        Gets the predicate of this Statement.

        :return: The predicate of this Statement.
        :rtype: StatementsPredicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """
        Sets the predicate of this Statement.

        :param predicate: The predicate of this Statement.
        :type: StatementsPredicate
        """

        self._predicate = predicate

    @property
    def object(self):
        """
        Gets the object of this Statement.

        :return: The object of this Statement.
        :rtype: StatementsObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this Statement.

        :param object: The object of this Statement.
        :type: StatementsObject
        """

        self._object = object

    @property
    def beacon(self):
        """
        Gets the beacon of this Statement.
        beacon ID 

        :return: The beacon of this Statement.
        :rtype: str
        """
        return self._beacon

    @beacon.setter
    def beacon(self, beacon):
        """
        Sets the beacon of this Statement.
        beacon ID 

        :param beacon: The beacon of this Statement.
        :type: str
        """

        self._beacon = beacon

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Statement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
