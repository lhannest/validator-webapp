# coding: utf-8

"""
    Translator Knowledge Beacon API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API). 

    OpenAPI spec version: 1.0.12
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ConceptsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_concept_details(self, concept_id, **kwargs):
        """
        Retrieves details for a specified concepts in the system, as specified by a (url-encoded) CURIE identifier of a concept known the given knowledge source. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_concept_details(concept_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str concept_id: (url-encoded) CURIE identifier of concept of interest (required)
        :param list[str] beacons: set of IDs of beacons to be used as knowledge sources for the query 
        :param str session_id: identifier to be used for tagging session data 
        :return: list[ConceptDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_concept_details_with_http_info(concept_id, **kwargs)
        else:
            (data) = self.get_concept_details_with_http_info(concept_id, **kwargs)
            return data

    def get_concept_details_with_http_info(self, concept_id, **kwargs):
        """
        Retrieves details for a specified concepts in the system, as specified by a (url-encoded) CURIE identifier of a concept known the given knowledge source. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_concept_details_with_http_info(concept_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str concept_id: (url-encoded) CURIE identifier of concept of interest (required)
        :param list[str] beacons: set of IDs of beacons to be used as knowledge sources for the query 
        :param str session_id: identifier to be used for tagging session data 
        :return: list[ConceptDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['concept_id', 'beacons', 'session_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concept_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'concept_id' is set
        if ('concept_id' not in params) or (params['concept_id'] is None):
            raise ValueError("Missing the required parameter `concept_id` when calling `get_concept_details`")


        collection_formats = {}

        resource_path = '/concepts/{conceptId}'.replace('{format}', 'json')
        path_params = {}
        if 'concept_id' in params:
            path_params['conceptId'] = params['concept_id']

        query_params = {}
        if 'beacons' in params:
            query_params['beacons'] = params['beacons']
            collection_formats['beacons'] = 'multi'
        if 'session_id' in params:
            query_params['sessionId'] = params['session_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ConceptDetail]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_concepts(self, keywords, **kwargs):
        """
        Retrieves a (paged) list of concepts in the system 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_concepts(keywords, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str keywords: a (urlencoded) space delimited set of keywords or substrings against which to match concept names and synonyms (required)
        :param str semgroups: a (url-encoded) space-delimited set of semantic groups (specified as codes CHEM, GENE, ANAT, etc.) to which to constrain concepts matched by the main keyword search (see [SemGroups](https://metamap.nlm.nih.gov/Docs/SemGroups_2013.txt) for the full list of codes) 
        :param int page_number: (1-based) number of the page to be returned in a paged set of query results 
        :param int page_size: number of concepts per page to be returned in a paged set of query results 
        :param list[str] beacons: set of IDs of beacons to be used as knowledge sources for the query 
        :param str session_id: identifier to be used for tagging session data 
        :return: list[Concept]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_concepts_with_http_info(keywords, **kwargs)
        else:
            (data) = self.get_concepts_with_http_info(keywords, **kwargs)
            return data

    def get_concepts_with_http_info(self, keywords, **kwargs):
        """
        Retrieves a (paged) list of concepts in the system 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_concepts_with_http_info(keywords, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str keywords: a (urlencoded) space delimited set of keywords or substrings against which to match concept names and synonyms (required)
        :param str semgroups: a (url-encoded) space-delimited set of semantic groups (specified as codes CHEM, GENE, ANAT, etc.) to which to constrain concepts matched by the main keyword search (see [SemGroups](https://metamap.nlm.nih.gov/Docs/SemGroups_2013.txt) for the full list of codes) 
        :param int page_number: (1-based) number of the page to be returned in a paged set of query results 
        :param int page_size: number of concepts per page to be returned in a paged set of query results 
        :param list[str] beacons: set of IDs of beacons to be used as knowledge sources for the query 
        :param str session_id: identifier to be used for tagging session data 
        :return: list[Concept]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['keywords', 'semgroups', 'page_number', 'page_size', 'beacons', 'session_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concepts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'keywords' is set
        if ('keywords' not in params) or (params['keywords'] is None):
            raise ValueError("Missing the required parameter `keywords` when calling `get_concepts`")


        collection_formats = {}

        resource_path = '/concepts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'keywords' in params:
            query_params['keywords'] = params['keywords']
        if 'semgroups' in params:
            query_params['semgroups'] = params['semgroups']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'beacons' in params:
            query_params['beacons'] = params['beacons']
            collection_formats['beacons'] = 'multi'
        if 'session_id' in params:
            query_params['sessionId'] = params['session_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Concept]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
